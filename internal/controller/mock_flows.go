// Code generated by MockGen. DO NOT EDIT.
// Source: flows.go

// Package controller is a generated GoMock package.
package controller

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFlowsAPI is a mock of FlowsAPI interface.
type MockFlowsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFlowsAPIMockRecorder
}

// MockFlowsAPIMockRecorder is the mock recorder for MockFlowsAPI.
type MockFlowsAPIMockRecorder struct {
	mock *MockFlowsAPI
}

// NewMockFlowsAPI creates a new mock instance.
func NewMockFlowsAPI(ctrl *gomock.Controller) *MockFlowsAPI {
	mock := &MockFlowsAPI{ctrl: ctrl}
	mock.recorder = &MockFlowsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlowsAPI) EXPECT() *MockFlowsAPIMockRecorder {
	return m.recorder
}

// AddPodRailFlows mocks base method.
func (m *MockFlowsAPI) AddPodRailFlows(cookie uint64, vf, bridge, podIP, podMAC string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPodRailFlows", cookie, vf, bridge, podIP, podMAC)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPodRailFlows indicates an expected call of AddPodRailFlows.
func (mr *MockFlowsAPIMockRecorder) AddPodRailFlows(cookie, vf, bridge, podIP, podMAC interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPodRailFlows", reflect.TypeOf((*MockFlowsAPI)(nil).AddPodRailFlows), cookie, vf, bridge, podIP, podMAC)
}

// DeletePodRailFlows mocks base method.
func (m *MockFlowsAPI) DeletePodRailFlows(cookie uint64, bridge string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodRailFlows", cookie, bridge)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodRailFlows indicates an expected call of DeletePodRailFlows.
func (mr *MockFlowsAPIMockRecorder) DeletePodRailFlows(cookie, bridge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodRailFlows", reflect.TypeOf((*MockFlowsAPI)(nil).DeletePodRailFlows), cookie, bridge)
}
