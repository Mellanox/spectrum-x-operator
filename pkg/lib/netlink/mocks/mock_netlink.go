// Code generated by MockGen. DO NOT EDIT.
// Source: netlink.go

// Package mock_netlink is a generated GoMock package.
package mock_netlink

import (
	reflect "reflect"

	netlink "github.com/Mellanox/spectrum-x-operator/pkg/lib/netlink"
	gomock "github.com/golang/mock/gomock"
	netlink0 "github.com/vishvananda/netlink"
)

// MockLink is a mock of Link interface.
type MockLink struct {
	ctrl     *gomock.Controller
	recorder *MockLinkMockRecorder
}

// MockLinkMockRecorder is the mock recorder for MockLink.
type MockLinkMockRecorder struct {
	mock *MockLink
}

// NewMockLink creates a new mock instance.
func NewMockLink(ctrl *gomock.Controller) *MockLink {
	mock := &MockLink{ctrl: ctrl}
	mock.recorder = &MockLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLink) EXPECT() *MockLinkMockRecorder {
	return m.recorder
}

// Attrs mocks base method.
func (m *MockLink) Attrs() *netlink0.LinkAttrs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attrs")
	ret0, _ := ret[0].(*netlink0.LinkAttrs)
	return ret0
}

// Attrs indicates an expected call of Attrs.
func (mr *MockLinkMockRecorder) Attrs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockLink)(nil).Attrs))
}

// Type mocks base method.
func (m *MockLink) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockLinkMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockLink)(nil).Type))
}

// MockNetlinkLib is a mock of NetlinkLib interface.
type MockNetlinkLib struct {
	ctrl     *gomock.Controller
	recorder *MockNetlinkLibMockRecorder
}

// MockNetlinkLibMockRecorder is the mock recorder for MockNetlinkLib.
type MockNetlinkLibMockRecorder struct {
	mock *MockNetlinkLib
}

// NewMockNetlinkLib creates a new mock instance.
func NewMockNetlinkLib(ctrl *gomock.Controller) *MockNetlinkLib {
	mock := &MockNetlinkLib{ctrl: ctrl}
	mock.recorder = &MockNetlinkLibMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetlinkLib) EXPECT() *MockNetlinkLibMockRecorder {
	return m.recorder
}

// AddrAdd mocks base method.
func (m *MockNetlinkLib) AddrAdd(link netlink.Link, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrAdd", link, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddrAdd indicates an expected call of AddrAdd.
func (mr *MockNetlinkLibMockRecorder) AddrAdd(link, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrAdd", reflect.TypeOf((*MockNetlinkLib)(nil).AddrAdd), link, ip)
}

// AddrDel mocks base method.
func (m *MockNetlinkLib) AddrDel(link netlink.Link, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrDel", link, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddrDel indicates an expected call of AddrDel.
func (mr *MockNetlinkLibMockRecorder) AddrDel(link, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrDel", reflect.TypeOf((*MockNetlinkLib)(nil).AddrDel), link, ip)
}

// GetRouteSrc mocks base method.
func (m *MockNetlinkLib) GetRouteSrc(dst string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteSrc", dst)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteSrc indicates an expected call of GetRouteSrc.
func (mr *MockNetlinkLibMockRecorder) GetRouteSrc(dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteSrc", reflect.TypeOf((*MockNetlinkLib)(nil).GetRouteSrc), dst)
}

// IPv4Addresses mocks base method.
func (m *MockNetlinkLib) IPv4Addresses(link netlink.Link) ([]netlink0.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPv4Addresses", link)
	ret0, _ := ret[0].([]netlink0.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IPv4Addresses indicates an expected call of IPv4Addresses.
func (mr *MockNetlinkLibMockRecorder) IPv4Addresses(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPv4Addresses", reflect.TypeOf((*MockNetlinkLib)(nil).IPv4Addresses), link)
}

// IsLinkAdminStateUp mocks base method.
func (m *MockNetlinkLib) IsLinkAdminStateUp(link netlink.Link) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLinkAdminStateUp", link)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLinkAdminStateUp indicates an expected call of IsLinkAdminStateUp.
func (mr *MockNetlinkLibMockRecorder) IsLinkAdminStateUp(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLinkAdminStateUp", reflect.TypeOf((*MockNetlinkLib)(nil).IsLinkAdminStateUp), link)
}

// LinkByName mocks base method.
func (m *MockNetlinkLib) LinkByName(name string) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkByName", name)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkByName indicates an expected call of LinkByName.
func (mr *MockNetlinkLibMockRecorder) LinkByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkByName", reflect.TypeOf((*MockNetlinkLib)(nil).LinkByName), name)
}

// LinkSetUp mocks base method.
func (m *MockNetlinkLib) LinkSetUp(link netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkSetUp", link)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkSetUp indicates an expected call of LinkSetUp.
func (mr *MockNetlinkLibMockRecorder) LinkSetUp(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkSetUp", reflect.TypeOf((*MockNetlinkLib)(nil).LinkSetUp), link)
}

// NeighList mocks base method.
func (m *MockNetlinkLib) NeighList(linkIndex int) ([]netlink0.Neigh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeighList", linkIndex)
	ret0, _ := ret[0].([]netlink0.Neigh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeighList indicates an expected call of NeighList.
func (mr *MockNetlinkLibMockRecorder) NeighList(linkIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeighList", reflect.TypeOf((*MockNetlinkLib)(nil).NeighList), linkIndex)
}
